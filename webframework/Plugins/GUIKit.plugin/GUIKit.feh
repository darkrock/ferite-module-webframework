
namespace GUIKit {
	final string ViewState = "____VIEWSTATE____";
	final string NoValue   = "____VIEWSTATE_NO_GIVEN_VALUE____";

	class Component {
		string name;
		number weight = 0;
		array  depends;
		string implementation;
		void   klass;
		
		static function register( string name, array depends, string implementation ) {
			void klass = self;
			return new klass( name, depends, implementation );
		}
		constructor( string name, array depends, string implementation ) {
			if( not GUIKit.components.keyExists(name) ) {
				GUIKit.components[name] = self;
				.name = name;
				.depends = depends;
				.implementation = implementation;
			}
		}
		function loadCode {
			string path = .pathForComponentResource("${.name}.feh");
			debug(__FILE__,__LINE__,"Loading component code for ${.name}");
			monitor {
				include( path );
			} handle {
				raise new Error("Unable to load '${.name}' component code"); // "; compile failed: ${err.str} ${err.backtrace()}");
			}
			.klass = Class.locate(.implementation);
			if( .klass == null ) {
				raise new Error("Unable to find implementation class '${.implementation}' for component '${.name}' in loaded code '$path'");
			}
		}
		function setClass( void klass ) 
			.klass = klass;
		function pathForComponentResource( string name )
			return __pathFor( 'Support', "${.name}/$name", 'Components' );
		function uriForComponentResource( string name )
			return __uriFor( 'Support', "${.name}/$name", 'Components' );
		
		function dependancies
			return .depends;
		function templateResources
			return [ "${.name}.template" ];
		function javascript
			return [ "${.name}.js" ];
		function css
			return [ "${.name}.css" ];
	}
	
	array components;
	
	function loadComponent( string name ) {
		object component = null;
		if( not .components.keyExists(name) ) {
			string path = __pathFor( 'Support', name + '/Core.feh', 'Components' );
			if( path ) {
				monitor {
					include( path );
				} handle( e ) {
					raise new Error("Unable to load '${.name}' component core information; compile failed: ${e.str}");
				}
				if( .components.keyExists(name) ) {
					number maxWeight = 0;
					component = .components[name];
					component.dependancies().each() using ( dependant ) {
						object c = GUIKit.loadComponent( dependant );
						if( c.weight > maxWeight ) 
							maxWeight = c.weight;
					};
					component.weight = maxWeight + 1;
					component.loadCode();
				}
			} else {
				raise new Error("Unable to locate $name/Core.feh");
			}
		} else {
			component = .components[name];
		}
		return component;
	}
	function componentByName( string name ) {
		if( .components.keyExists(name) ) {
			return .components[name];
		}
		return null;
	}
	function componentList {
		array list = [];
		.components.each() using ( component ) {
			number w = component.weight;
			if( not list.keyExists("$w") ) {
				list["$w"] = [];
			}
			list["$w"][] = component.name;
		};
		return list;
	}
	function requiredCSSHeaders {
		array componentList = .components.sort() using ( a, b ) {
			if( a.weight < b.weight )
				return -1;
			if( a.weight == b.weight )
				return 0;
			if( a.weight > b.weight )
				return 1;
		};
		string list = '';
		componentList.each() using ( component ) {
			component.css().each() using ( css ) {
				string uri = component.uriForComponentResource(css);
				if( uri ) {
					list += HTML.stylesheetHeader( uri );
				}
			};
		};
		return list;
	}
	function requiredJavascriptHeaders {
		array componentList = .components.sort() using ( a, b ) {
			if( a.weight < b.weight )
				return -1;
			if( a.weight == b.weight )
				return 0;
			if( a.weight > b.weight )
				return 1;
		};
		array list = [];
		componentList.each() using ( component ) {
			component.javascript().each() using ( js ) {
				list[] = component.name + '/' + js;
			};
		};
		return list;
	}
	function fetchCreate( string id, void klass ) {
		if( GUIKit.EventHandlers.keyExists(id) )
			return GUIKit.EventHandlers[id];
		return new klass(id);
	}
}

// Our render engine
uses "Render/Render.feh";

// Event processing
uses "Components/Events.feh";

// Separate classes
uses "Components/Page.feh";
uses "Components/Toolbox.feh";

// Main abstract classes
uses "Components/View.feh";
uses "Components/Container.feh";

// Non-container classes
uses "Components/Hidden.feh";
uses "Components/Label.feh";
uses "Components/PlainText.feh";
uses "Components/Button.feh";
uses "Components/TextField.feh";
uses "Components/PasswordField.feh";
uses "Components/CheckBox.feh";
uses "Components/TextView.feh";
uses "Components/PopupButton.feh";
uses "Components/FileLoader.feh";
uses "Components/List.feh";

uses "Components/HTMLSnippet.feh";
uses "Components/Calendar.feh";
uses "Components/CentionCalendar.feh";
uses "Components/SelectBox.feh";
uses "Components/ColourPicker.feh";
uses "Components/GridbagLayout.feh";

// Container classes
uses "Components/Box.feh";
uses "Components/TabView.feh";
uses "Components/TabViewItem.feh";
uses "Components/Table.feh";
uses "Components/RadioGroup.feh";
uses "Components/Dialog.feh";

// /* GAJDO
uses "Components/RestrictedView.feh";
uses "Components/Helper.feh";

// Complex classes
// uses "Components/Document.feh";
// */

// Validation classes
uses "Components/Validator.feh";
