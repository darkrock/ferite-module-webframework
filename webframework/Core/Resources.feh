// Tobias 2011-10-21: This has been deemed evil and disabled.
//uses "image";

global {
	array requiredJavascriptList;
	array seenRequiredJavascriptList;
}

/**
 * @group Resource Functions
 */

/**
 * @function uriForCurrentPage
 * @declaration function uriForCurrentPage()
 * @brief Generate the url for the current page including the actions, but not the commands
 * @return The generated url
 */
function uriForCurrentPage() {
	return uriForApplicationAction( application.action );
}

function uriForCurrentPageWithCommand( string command )
	return uriForApplicationActionWithCommand( application.action, command );
	
/**
 * @function uriForCurrentPageActions
 * @declaration function uriForCurrentPageActions()
 * @brief Generate the url for the current page including the actions and commands
 * @return The generated url
 */
function uriForCurrentPageActions() {
	return uriForApplicationActionWithCommand(application.action, application.commands.join('/'));
}
/**
 * @function uriForApplicationAction
 * @declaration function uriForApplicationAction( string action )
 * @brief Generate a url for the current application and a given action
 * @param string action The action you wish to use, this should not have any slashes before or after the action.
 * @return The generated url
 */
function uriForApplicationAction( string action ) {
   return uriForApplicationActionWithCommand( action, "" );
}
/**
 * @function uriForApplicationActionWithCommand
 * @declaration function uriForApplicationActionWithCommand( string action, string command )
 * @brief Generate a url with a given action and set of commands
 * @param string action The action you wish to use, this should not have any slashes before or after the action. 
 * @param string command The comand values you wish to use, this should not have any slashes before or after the value.
 * @return The generated url
 */
function uriForApplicationActionWithCommand( string action, string command ) {
	if( action ) {
		if( command != "" )
			return Config.Domain + application.topLevel + "/$action/-/$command";
		return Config.Domain + application.topLevel + "/$action";
	}
	return Config.Domain + application.topLevel;
}
function uriForApplicationActionWithParams( string action, string params ) {
	raise new Error('The functon uriForApplicationActionWithParams has been deprecated in this release');
}
/**
 * @function uriForCommand
 * @declaration function uriForCommand( string command, array parameters )
 * @brief Generate the url for a command on the current application action with a given array of parameters
 * @param string command The command
 * @param array parameters The parameters to pass to the command
 * @return The url
 */
function uriForCommand( string command, array parameters ) {
	return uriForApplicationActionWithCommand( application.action, "$command" + (parameters ? "/" + parameters.join('/') : ''));
}

namespace Resources {
	array uriCache, pathCache;
}
function __uriFor( string container, string name, string type ) {
	string tag = "$container/$name/$type";
	if( Resources.uriCache.keyExists( tag ) ) {
		return Resources.uriCache[tag];
	} else {
		string extra = container + (type ? "/$type" : '') + "/$name";
		string templatePath = 
			(Cache.page ?
				application.filePath + 'Resources/Templates/' + Cache.page.getClass().getWrapperTemplateName() + '.template' + (type ? "/$type" : '') + "/$name" :
				'');
		string appPath = application.filePath + extra;
		string sysPath = Config.PublicPath + extra;
		string uri = '';
		
		if( templatePath and Posix.stat( templatePath ) ) 
			uri = Config.Domain + application.urlPath + 'Resources/Templates/' + Cache.page.getClass().getWrapperTemplateName() + '.template' + (type ? "/$type" : '') + "/$name";
		else if( Posix.stat( appPath ) )
			uri = Config.Domain + application.urlPath + extra;
		else if( Posix.stat( sysPath ) )
			uri = Config.Domain + Config.PublicURL + extra;
			
		Resources.uriCache[tag] = uri;
		return uri;
	}
}
function __pathFor( string container, string name, string type ) {
	string tag = "$container/$name/$type";
	if( Resources.pathCache.keyExists( tag ) ) {
		return Resources.pathCache[tag];
	} else {
		string extra = container + (type ? "/$type" : '') + "/$name";
		string templatePath = 
			(Cache.page ?
				application.filePath + 'Resources/Templates/' + Cache.page.getClass().getWrapperTemplateName() + '.template' + (type ? "/$type" : '') + "/$name" :
				'');
		string appPath = application.filePath + extra;
		string sysPath = Config.PublicPath + extra;
		string path = '';
		
		if( templatePath and Posix.stat( templatePath) )
			path = templatePath;
		else if( Posix.stat( appPath ) )
			path = appPath;
		else if( Posix.stat( sysPath ) )
			path = sysPath;
		Resources.pathCache[tag] = path;
		return path;
	}
	return "";
}
function __pathForResource( string name, string type )
	return __pathFor( 'Resources', name, type );
function __uriForResource( string name, string type ) 
	return __uriFor( 'Resources', name, type );

function __pathForPageItem( string name )
	return __pathFor( 'Pages', name, '' );
function pathForPageCode( string name )
  return __pathForPageItem( name + ".page.fe" );
function pathForPageTemplate( string name )
  return __pathForPageItem( name + ".page" );

/**
 * @function uriForImageResource
 * @declaration function uriForImageResource( string name )
 * @brief Search both the application and the server images resources to see if a given image exists
 * @param string name The filename of image to look for
 * @return The url to the image if one can be found, an empty string otherwise
 */
function uriForImageResource( string name )
  return __uriForResource( name, "Images" );
/**
 * @function uriForCSSResource
 * @declaration function uriForCSSResource( string name )
 * @brief Search both the application and the server CSS resources to see if a given stylesheet exists
 * @param string name The name of the stylesheet to look for without the '.css' extension. If you want 'webframework.css', you need only supply 'webframework'
 * @return The url to the stylesheet if one can be found, an empty string otherwise
 */
function uriForCSSResource( string name )
  return __uriForResource( name + ".css", "CSS" );
/**
 * @function uriForJavascriptResource
 * @declaration function uriForJavascriptResource( string name )
 * @brief Search both the application and the server javascript resources to see if a given script exists
 * @param string name The name of the script file to look for without the '.js' extension. If you want 'webframework.js', you need only supply 'webframework'
 * @return The url to the script file if one can be found, an empty string otherwise
 */
function uriForJavascriptResource( string name ) {
	string uri = __uriForResource( name + ".js", "Javascript" );
	uri and (not seenRequiredJavascriptList.keyExists(name)) and requiredJavascriptList[] = name;
	seenRequiredJavascriptList[name] = true;
	return uri;
}
function pathForJavascriptResource( string name )
	return __pathForResource( name + '.js', 'Javascript' );
/**
 * @function uriForTemplateResource
 * @declaration function uriForTemplateResource( string name )
 * @brief Search both the application and the server resources for a given template and generate a url to its location
 * @param string name The name of the template to find, do not supply the '.template' extension
 * @return The url to the template, or an empty string otherwise
 */
function uriForTemplateResource( string name )
  return __uriForResource( name + ".template", "Templates" );
/**
 * @function pathForTemplateResource
 * @declaration function pathForTemplateResource( string name )
 * @brief Search both the application and the server resources for a given template and generate a path to its location
 * @param string name The name of the template to find, do not supply the '.template' extension
 * @return The disk path to the template, or an empty string otherwise
 */
function pathForTemplateResource( string name )
    return __pathForResource( name + ".template", "Templates" );

/**
 * @function pathForSupportResource
 * @declaration function pathForSupportResource( string name )
 * @brief Generate a disk path for a given support file
 * @param string name The name of the support file without the '.feh'
 * @return The path upon successful location, empty otherwise
 */
function pathForSupportResource( string name )
  return __pathForResource( name + ".feh", "Support" );

/**
 * @function pathForDataItem
 * @declaration function pathForDataItem( string item )
 * @brief Gernerate the disk file path for a given item within the applications webframework data directory
 * @param string item The name, this can be a realtive path e.g. test/test.jpg
 * @return The disk path for the item
 */
function pathForDataItem( string item )
	return Config.DataDirectoryPath + '/' + application.virtualName + '/' + item;
/**
 * @function uriForDataItem
 * @declaration function uriForDataItem( string item )
 * @brief Gernerate the url for a given item within the applications webframework data directory
 * @param string item The name, this can be a realtive path e.g. test/test.jpg
 * @return The url for the item
 */
function uriForDataItem( string item )
	return Config.DataDirectoryURL + '/' + application.virtualName + '/' + item;
/**
 * @function transparentPixelUri
 * @declaration function transparentPixelUri()
 * @brief Generate a url to a transparent 1x1 GIF
 * @return The url for the image
 */
function transparentPixelUri()
	return Config.Domain+ Config.PublicURL + "Resources/Images/Components/TransparentPixel.gif";
/**
 * @function transparentPixel
 * @declaration function transparentPixel( number width, number height )
 * @brief Generate an HTML img tag pointed at a transparent pixel of the given width and height
 * @param number width The width of the image
 * @param number height The height of the image
 * @return The image tag
 */
function transparentPixel( number width, number height )
	return '<img src="' + transparentPixelUri() + "\" width=\"$width\" height=\"$height\" border=\"0\" />";
/**
 * @function transparentPixel
 * @declaration function transparentPixel()
 * @brief Generate an image tag for a 1x1 transparent GIF pixel
 * @return The image url
 */
function transparentPixel()
	return transparentPixel( 1, 1 );

/**
 * @function resourceForName
 * @declaration function resourceForName( string directory, string name )
 * @brief Locate a resource within a directory of a given name
 * @description This function is used to say "I want a resource, but I don't know its exact extension". This is useful when 
				you are after a given resource type for instance an image, but don't need to concern yourself with the extension.
 * @param string directory The directory to look in
 * @param string name The name of the resource
 * @return The path to the first resource item found matching the name, an empty string otherwise
 */
function resourceForName( string directory, string name ) {
	string path = '';
	monitor {
		object d = Directory.open(directory);
		if( d ) {
			array items = d.toArray();
			object r = new Regexp("^($name\.[a-zA-Z]+)"), match;
	
			Array.each( items ) using ( entry ) {
				if( (match = r.match(entry)) ) {
					path = ( directory + '/' + match.capture(0) );
					return false;
				}
			};
		}
	} handle {
		path = '';
	}
	return path;
}

/** @end */

/**
 * @namespace ImageTools
 */
//namespace ImageTools {
//	
	/**
	 * @function imageForName
	 * @declaration function imageForName( string directory, string name )
	 * @brief For a given directory and a given name, locate a file with the name regardless of extension
	 * @param string directory The directory to search
	 * @param string name The name of the image
	 * @return An Image object on success, null otherwise
	 */
	/**
	 */
//	function imageForName( string directory, string name ) {
//		object image = null;
//		monitor {
//			object d = Directory.open(directory);
//			if( d ) {
//				array items = d.toArray();
//				object r = new Regexp("^($name\.[a-zA-Z]+)"), match;
//		
//				Array.each( items ) using ( entry ) {
//					if( (match = r.match(entry)) ) {
//						image = new Image();
//						image.load( directory + '/' + match.capture(0) );
//						return false;
//					}
//				};
//			}
//		} handle {
//			image = null;
//		}
//		return image;
//	}
	/**
	 * @function thumbNailName
	 * @declaration function thumbNailName( string name )
	 * @brief For a given name, generate the name of a thumb nail maintaining consistency
	 * @param string name The name of the image
	 * @return The filename to use.
	 */
//	function thumbNailName( string name ) {
//		return "Thumb_$name.jpg";
//	}
	/**
	 * @function makeThumbNail
	 * @declaration function makeThumbNail( string path, string filename, string extension )
	 * @brief For a given path, image name and extension, generate a scaled down thumbnail that fits in a 133x88 box
	 * @param string path The path to find the original image and store the new one.
	 * @param string filename The filename to use
	 * @param string extension The extension of the source image
	 * @return An array containing the width and height of the image
	 */
//	function makeThumbNail( string path, string filename, string extension ) {
//		object image = new Image();
//		number width, height;
//		number scale = 1;
//		
//		image.load( "$path/$filename.$extension" );
//		
//		width = image.getWidth();
//		height = image.getHeight();
//		
//		if( width > height )
//			scale = 133.0 / width;
//		else
//			scale = 88.0 / height;
//		
//		width = Number.round( width * scale );
//		height = Number.round( height * scale );
//		
//		image.resize( width, height );
//		
//		image.saveAsType( "$path/${.thumbNailName(filename)}", "jpg" );
//		
//		return [ 'width' => width, 'height' => height ];
//	}
	/**
	 * @function generateImageStatistics
	 * @declaration function generateImageStatistics( object image )
	 * @brief Load an image up and generate a string describing the image statistics (dimensions and size)
	 * @param object image The image object to source the information from
	 * @return A string containing the information, or 'No Details' otherwise
	 */
//	function generateImageStatistics( object image ) {
//		string imageDescription = 'No Details';
//		if( image ) 
//		{
//			object file = File.open(image.lastLoaded);
//			number file_size = file.length();
//			string size = '';
//			
//			if( file_size >= 1073741824 ) {
//				size = '' + (Number.round(file_size / 1073741824.0 * 100) / 100) + "Gb";
//			} else if( file_size >= 1048576 ) {
//				size = '' + (Number.round(file_size / 1048576.0 * 100) / 100) + "Mb";
//			} else if( file_size >= 1024 ) {
//				size = '' + (Number.round(file_size / 1024.0 * 100) / 100) + "Kb";
//			} else {
//				size = '' + file_size + "b";
//			} 
//			imageDescription = "Dimensions: ${image.getWidth()}x${image.getHeight()}; Size: $size";
//		}
//		return imageDescription;
//	}	
//}

/**
 * @end
 */
