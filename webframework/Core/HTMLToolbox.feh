/**
 * @namespace HTML
 * @brief     A set of functions that makes writing HTML in code much more programming and much less string work.
 */
namespace HTML { 
	function div( void d ) {
		return .tag('div', [], "$d");
	}
	function href( string target, void c ) {
		return .tag('a', [ 'href' => target ], "$c");
	}
	function cell( string cell ) {
		return .tag('td', [], cell);
	}
	function row( string row ) {
		return .tag('tr', [], row);
	}
	function table( string contents ) {
		return .tag( 'table', [
						'cellpadding' => 0,
						'cellspacing' => 0,
						'border' => 0,
						'width' => '100%'
					], contents );
	}
	function bold( void contents ) {
		return "<b>$contents</b>";
	}
	function italic( void contents ) {
		return "<i>$contents</i>";
	}
	function underline( void value ) {
		return "<u>$value</u>";
	}
	function pre( void contents ) {
		return "<pre>$contents</pre>\n";
	}
	function strike( void contents ) {
		return "<strike>$contents</strike>";
	}
	function titleBox( string title, void contents ) {
		return .div( .bold( title + ":" ) + " " + contents );
	}
	function newline() {
		return "<br />\n";
	}
	function blockquote( string value ) {
		return "<blockquote>$value</blockquote>";
	}
	function javascript( string contents ) {
		return "<script type=\"text/javascript\" language=\"javascript1.5\">$contents</script>";
	}
	// This is used to sneak javascript into ajax calls
	function ajax_javascript( string js ) {
		return "<img style=\"display: none\" src=\"${uriForImageResource('Components/TransparentPixel.gif')}\" alt=\"\" " + 
				"onload=\"${(js - "\n" - "\r")};this.parentNode.removeChild(this);\" />";
	}
	function window_open( string action, string command, number width, number height ) {
		return "window.open('${uriForApplicationActionWithCommand(action,command)}','','scrollbars=no,menubar=no,height=$height,width=$width,resizable=yes,toolbar=no,location=no,status=no');";
	}
	function window_open( string action, string command ) {
		return .window_open( action, command, 800, 600 );
	}
	function html( string contents ) {
		return "<html>$contents</html>";
	}
	function head( string contents ) {
		return "<head>$contents</head>";
	}
	function title( string title ) {
		return "<title>$title</title>";
	}
	function body( string contents ) {
		return "<body>$contents</body>";
	}
	function image( string location ) {
		return .image( location, '' );
	}
	function image( string location, string alt ) {
		return "<img src=\"$location?Update=${Date.now()}\" alt=\"$alt\" valign=\"middle\" />";
	}
	function image( string location, string alt, number width, number height ) {
		return "<img src=\"$location?Update=${Date.now()}\" alt=\"$alt\" valign=\"middle\" width=\"$width\" height=\"$height\" />";
	}
	function grabIDs( string form ) {
		object r = new Regexp('([iI][dD])="([^"]+)"');
		array  ids;
		r.matchAll( form ) using ( match ) { 
			ids[] = match.capture(1); 
		};
		return ids;
	}
	function anonymousJavascriptButton( string value, string onclick ) {
		return "<input type=\"button\" value=\"$value\" onclick=\"${(onclick - "\n")}\" class=\"wfButton\" style=\"cursor:pointer;\" />";
	}
	function javascriptHeader( string location ) {
		return "<script xmlns=\"http://www.w3.org/1999/xhtml\" src=\"$location\" type=\"text/javascript\">\n</script>";
	}
	function javascriptChunk( string chunk ) {
		return "<script xmlns=\"http://www.w3.org/1999/xhtml\" type=\"text/javascript\"><!--\n$chunk\n--></script>\n";
	}
	function stylesheetHeader( string location ) {
		return "<link rel=\"stylesheet\" type=\"text/css\" href=\"$location\" />\n";
	}
	function javascriptLoadFunction( string body ) {
		return 'registerLoadFunction( function () {' + body + '} );';
	}
	function a( string target, string contents ) {
		return "<a href=\"$target\">$contents</a>";
	}
	function clickArea( string contents, string clickhandler ) {
		return "<span onclick=\"$clickhandler\">$contents</span>";
	}
	function hidden( string name, void value ) {
		return "<input type=\"hidden\" id=\"$name\" name=\"$name\" value=\"$value\" />";
	}
	function label( void value ) {
		return "<span class=\"wfLabel\">$value</span>";
	}
	function text( string name, void value ) {
		return "<input type=\"text\" id=\"$name\" name=\"$name\" value=\"$value\" />";
	}
	function tag( string tag, array attributes )
		return .tag( tag, attributes, '' );
	function tag( string tag, array attributes, string contents ) {
		string result = "<$tag";
		attributes.map() using ( key, value ) {
			result += " $key=\"$value\"";
		};
		if( contents ) {
			result += ">$contents</$tag>";
		} else {
			result += " />";
		}
		return result;
	}
	function MCAMChannel( string type, string id, void content ) {
		id = (id ? "\"id\":${JSON.valueToJSON(id)}," : "");
		return "{\"type\":${JSON.valueToJSON(type)},${id}\"content\":${JSON.valueToJSON(content)}}";
	}
	function MCAMChannel( string type, void content ) {
		return .MCAMChannel(type, '', content);
	}
	function MCAMEnvelope( string env ) {
		return '{"mcam":{"channels":[' + env + "]}}";
	}
	function MCAMEnvelope( array env ) {
		return '{"mcam":{"channels":[' + env.join(',') + "]}}";
	}
	function twoStepTango( string left, string right )
		return "$left <span class=\"wfSystemHint\">($right)</span>";
}
/**
 * @end
 */
