global {
	array debugOutput;
	array profileOutput;
	boolean wantConsoleLogging = false;
	boolean wantServerLogging = false;
}

function alog( string message ) {
	return log( application.realName, message );
}
function log( string module, string message ) {
	if( wantConsoleLogging ) {
		object d = Date.date(Date.GMTnow());
		Console.printlnErr("[${d.format('%H:%M:%S')}] [$module] $message");
	}
	if( wantServerLogging ) {
		ObjectServer.log( "Web Server] [$module", message );
	}
	
	debug("[$module] $message");
}
function log_mark() {
	string date = Date.date(Date.GMTnow()).format('%H:%M:%S');
	
	if( wantConsoleLogging ) {
		Console.printlnErr("[$date] -------------------------------- MARK --------------------------------");
	}
	if( wantServerLogging ) {
		.log('mark', "-------------------------------- MARK --------------------------------");
	}
}

class FakeMetrics {
	array messages;
	
	function checkpoint( string s ) {
		log( 'metrics.checkpoint', s );
		debug(__FILE__,__LINE__, s);
		.messages[] = s;
	}
	function checkpoints() return .messages;
}

function debug( string location, number line, void message ) {
	if( Config.Debug ) {
		debugOutput[] = [ location, line, "${Sys.timestamp()}", EscapeHTML("$message") ];
	}
}
function debug( void message ) {
	monitor {
		if( Config.Debug ) {
			debugOutput[] = [ '/Main Page', 0, "${Sys.timestamp()}", EscapeHTML("$message") ];
		}
	} handle {
		debugOutput[] = [ '/Main Page', 0, "${Sys.timestamp()}", EscapeHTML("$message") ];
	}
}
function collapseDebugOutput() {
	string js = '';
	number lineSize = 100;
	Array.each( debugOutput ) using ( item ) {
		array lines = Regexp.replaceAll('\r', item[3], '').lines();
		if( lines ) {
			string real_message, filename = File.name(item[0]);
			if( lines.size() == 1 and lines[0].length() < lineSize ) {
				string real_brief = Regexp.replaceAll("'", Regexp.replaceAll("[\r]?[\n]", lines[0], "<br />"), "\\'");
				js += "AddDebugOutput('$filename',${item[1]},${item[2]},'$real_brief','');\n";
			} else {
				string real_brief = lines[0][0..(lines[0].length() > lineSize ? lineSize : lines[0].length()-1)] + '...';
				real_message = Regexp.replaceAll("[\r]?[\n]", Regexp.replaceAll("\t", Regexp.replaceAll("'", lines.join("\n"), "\\'"), "&nbsp;&nbsp;&nbsp;&nbsp;"), "<br />");
				real_brief = Regexp.replaceAll("'", Regexp.replaceAll("[\r]?[\n]", real_brief, "<br />"), "\\'");
				js += "AddDebugOutput('$filename',${item[1]},${item[2]},'$real_brief','$real_message');\n";
			}
		}
	};
	return js;
}

global {
	number profile_depth;
}

function wf_depthString( number depth ) {
	string ws = "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t";
	return (depth > 0 ? ws[..(depth - 1)] : '');
}

function wf_profile( string name ) {
	number begin = Sys.timestamp();
	number end = 0;
	void result;
	
	profile_depth++;
	result = deliver();
	profile_depth--;

	end = Sys.timestamp();
	
	profileOutput[] = "profile: ${wf_depthString(profile_depth)}$name took ${(end - begin)} seconds to complete";

	return result;
}

wantConsoleLogging = false;
