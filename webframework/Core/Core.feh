
global {
	object request;
	object metrics;
	object application;
	
	boolean allowedToStoreSession = true;
	boolean webframeworkConsoleTool = false;
}

namespace Server {
	string filePath = '';
	string urlPath = '';
}

function print( void str ) {
	request.print( "$str" );
}
function println( void str ) {
	request.print( "<div>$str</div>\n" );
}

namespace modifies Config {
	function _useObjectServer {
		array list = Sys.getLibraryPaths();
		if( list ) {
			include("${list[0]}/webframework/Core/ObjectServerInterface.feh");
		}
	}
	function _useDatabaseServer {
		array list = Sys.getLibraryPaths();
		if( list ) {
			include("${list[0]}/webframework/Core/DatabaseInterface.feh");
		}
	}

	array  config;
	function loadConfiguration() {
		object localConfig;
		object config = new Namespace(Config);
	
		monitor {
			localConfig = new Namespace(LocalConfig);
		} handle {
			localConfig = null;
		} 
		if( localConfig ) {
			array variables = localConfig.getVariables();

			variables.map() using ( name, type ) {
				config.setVariable( name, localConfig.getVariable(name) );
			};
		}

		if( config.getVariables().keyExists('ObjectServerHost') ) {
			Config._useObjectServer();
			JSON.RPC.setDefaults( Config.ObjectServerHost, Config.ObjectServerPort, Config.ObjectServerURI );
			JSON.RPC.connection = null;
		}
		else if( config.getVariables().keyExists('DBCDatabase') ) {
			Config._useDatabaseServer();
		}
		
		.config['SiteVersion'] = 'ferite/webframework - http://webframework.ferite.org';
	}   
	function saveConfiguration() {

	}
	function get( string key ) {
		return .config[key];
	}
	function set( string key, string value ) {
		.config[key] = value;
	}
}	

namespace Core {
	
	function processQuery( array p ) {
		array  query;
		object matchRoot = new Regexp('^([^\[]+)');
		object matchKey = new Regexp('(\[(.+?)\])');
		array  keys = p.keys().sort();

		keys.each() using ( key ) {
			void currentValue;
			array path = matchKey.matchAll(key).process() using ( match ) {
				return match.capture(1);
			};
			path.unshift(matchRoot.match(key).capture(0));
			currentValue = query.getPath(path);	
			if( currentValue isa array ) {
				if( not currentValue.valueExists(p[key]) ) {
					currentValue[] = p[key];
					query.setPath(path, currentValue);
				}
			} else if( currentValue isa string ) {
				if( currentValue != p[key] ) {
					array new_value = [ currentValue, p[key] ];
					query.setPath(path, new_value);
				}
			} else {
				query.setPath(path, p[key]);
			}
			p.del(key);
		};
		return query;
	}

	function error( string message ) {
		request.print( application.defaultErrorHandler( I('Unable to run the application:') + message ) );
		Core.exit();
	}
	function exit() {
		if( Session.active and allowedToStoreSession )
			Session.shutdown();
		Sys.exit(0);
	}   

	function Startup( object currentApplication ) {
		string path, real_path, commands;
		array query;
		string appTopLevelPath;
		
		query = request.query();
		metrics = new FakeMetrics();

		metrics.checkpoint("Path processed, running application");
		appTopLevelPath = request.parsedUri() - request.pathInfo() - request.scriptname();

		currentApplication.virtualName = query['webframework_app'];
		currentApplication.action = query['webframework_action'].toArray('/').join('/');

		currentApplication.commands = [];
		query['webframework_command'].toArray('/').each() using ( item ) {
			array sub = item.toArray(':');
			if( sub.size() == 2 ) {
				currentApplication.commands[sub[0]] = sub[1];
			} else {
				currentApplication.commands[] = item;
			}
		};
		currentApplication.parameters = .processQuery(request.query());
		currentApplication.topLevel = (Config.ForceTopLevel ? Config.ForcedTopLevelPath : ((request.parsedUri() - request.scriptname()) - ".app/"));
		currentApplication.urlPath = (request.parsedUri() - request.scriptname());
		currentApplication.filePath = request.filepath();

		Session.start();
		return true;
	}

	function Shutdown() {
		application && application.storeSessionData();
		Interface.Shutdown();
		allowedToStoreSession and Session.shutdown();
		metrics.checkpoint("webframework done, good bye.");
		JSON.RPC.connection and JSON.RPC.connection.close();
	}
   
	function DumpValues() {
		return .DumpValues('<br>');
	}
	function DumpValues( string newline) {
		string values = '';
		array a = application.parameters, q = request.query();
		if( Array.keyExists(a, '____VIEWSTATE____') )
			Array.del( a, '____VIEWSTATE____' );
		if( Array.keyExists(q, '____VIEWSTATE____') )
			Array.del( q, '____VIEWSTATE____' );
		values += ( "Application Server File Path: <b>${Config.PublicPath}</b>$newline" );
		values += ( "Application Server URL Path: <b>${Config.PublicURL}</b>$newline" );
		values += ( "Application Server Cache Path: <b>${Config.CachePath}</b>$newline" );
		values += ( "Application File Path: <b>${application.filePath}</b>$newline" );
		values += ( "Application URL Path: <b>${application.urlPath}</b>$newline" );    
		values += ( "Application Commands: <b>${application.commands}</b>$newline" );    
		values += ( "Application Arguments: <b>$a</b>$newline" );
		values += ( "Application Top Level: ${application.topLevel}$newline" );
		values += ( "Application Action: <b>${application.action}</b>$newline" );
		values += ( "Application Full Action: <b>${application.action}${(application.commands ? '/-/' + application.commands.join('/') : '')}</b>$newline" );
		values += ( 'request.pathInfo: <b>' + request.pathInfo() + "</b>$newline" );
		values += ( 'request.parsedUri: <b>' + request.parsedUri() + "</b>$newline" );
		values += ( 'request.scriptname: <b>' + request.scriptname() + "</b>$newline" );
		values += ( 'request.filepath: <b>' + request.filepath() + "</b>$newline" );
		values += ( 'request.query: <b>' + q + "</b>$newline" );
		values += ( 'request.documentRoot: <b>' + request.documentRoot() + "</b>$newline" );
		values += ( 'request.fullUri: <b>' + request.fullUri() + "</b>$newline" );
		values += ( 'request.hostname: <b>' + request.hostname() + "</b>$newline" );
		values += ( 'request.method: <b>' + request.method() + "</b>$newline" );
		values += ( 'request.serverRoot: <b>' + request.serverRoot() + "</b>$newline" );	  
		values += ( 'request.referer: <b>' + request.referer() + "</b>$newline" );	  
		values += ( 'request.uri: <b>' + request.uri() + "</b>$newline" );	  
		values += ( 'request.userAgent: <b>' + request.userAgent() + "</b>$newline" );	
		values += ( 'request.redirect: <b>' + request.redirectURL() + "</b>$newline" );
	 	return values;
	}
	function Dump() {
		print(.DumpValues());
	}
	function DumpParameters() {
		array a = applicationArgs;
		if( Array.keyExists(a, '____VIEWSTATE____') )
			Array.del( a, '____VIEWSTATE____' );
		print(HTML.div(a));
	}
}

function EscapeHTML( string s ) {
   s = Regexp.replaceAll( "&", s, "&amp;" );
   s = Regexp.replaceAll( "<", s, "&lt;" );
   s = Regexp.replaceAll( ">", s, "&gt;" );
   return s;
}
