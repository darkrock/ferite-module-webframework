
namespace modifies GUIKit {

	array EventHandlers;
	array ActionHandlers;
	
	function eventHandlerForID( string id ) {
		if( .EventHandlers.keyExists(id) ) {
			return .EventHandlers[id];
		}
		return null;
	}
	function actionHandlerForID( string id ) {
		if( .ActionHandlers.keyExists(id) ) {
			return .eventHandlerForID(.ActionHandlers[id]);
		}
		return null;
	}
	
	class EventHandler {
		string eventHandlerID;
		constructor( string id ) {
			.setEventHandlerID(id);
		}
		function setEventHandlerID( string id ) {
			if( GUIKit.EventHandlers.keyExists(.eventHandlerID) )
				GUIKit.EventHandlers.del(.eventHandlerID);
		
			if( GUIKit.EventHandlers.keyExists(id) )
				raise new Error("Event handler with $id already exists as a different object!");

			.eventHandlerID = id;
			GUIKit.EventHandlers[id] = self;
		}
		function eventHandlerID() 
			return .eventHandlerID;
		static function linkedObjects
			return [];
		static function persistentValues
			return [];
	}
	    
    // Map our events to html events
    array eventMap, actionMap; 
    
    // Events
	final string EvClick  = "__GUIKit__.EvClick";    
	final string EvChange = "__GUIKit__.EvChange";	
	final string EvAJAX   = "__GUIKit__.EvAJAX";
	final string EvHotkey = "__GUIKit__.EvHotkey";
	final string EvRowClicked = "__GUIKit__.EvRowClicked";

	function eventToJSEvent( string event ) {
		if( Array.keyExists( .eventMap, event ) )
			return .eventMap[event];
		return event;
	}
	function eventToComponentAction( string event ) {
		if( Array.keyExists( .eventMap, event ) )
			return .actionMap[event];
		return event;
	}
    
	class EventHolder {
		string target;
		string func;
		string extra;
		string jsfunction;
		boolean background = false;

		function setup() {
			GUIKit.isBackgroundEvent = .background;
		}
		function invoke( object sender, string extra ) {
			GUIKit.EventHandlers[.target].callFunction(.func, sender, extra);
		}
    }    
}

GUIKit.eventMap = [
    GUIKit.EvClick => "onclick",
    GUIKit.EvChange => "onchange"
];
GUIKit.actionMap = [
    GUIKit.EvClick => "click",
    GUIKit.EvChange => "change",
    GUIKit.EvHotkey => "hotkey"
];
