namespace modifies Array {
	function backtraceToHTML( array a ) {
		boolean doneFirst = false;
		number count = 0;
		return a.join('') using ( item ) {
			string prefix = '', postfix = '<br />';
			string path = Directory.name(item['file']);
			string file = File.name(item['file']);
			string link = "$path<b><a style=\"text-decoration:none\" href=\"txmt://open?url=file://${item['file']}&line=${item['line']}\">$file:${item['line']}</a></b>";

			count++;
			if( not path ) {
				link = "${item['file']}:${item['line']}";
			} else {
				monitor {
					array lines = File.open(item['file']).toString().lines();
					string block = '';
					number killPrefix = 0;
					number linesBefore = 1;
					number linesAfter = 1;
					string variables;
				
					prefix = "";
					postfix = "";
					for( number i = item['line'] - linesBefore - 1; i < (item['line'] + linesAfter) and i < lines.size(); i++ ) {
						string line = Regexp.replaceAll("\t", lines[i], "    ");
						if( (i + linesBefore + 1) == item['line'] ) {
							while( line[killPrefix] == " " )
								killPrefix++;
						}
						if( line.length() > killPrefix )
							line = "\t" + line[killPrefix..];
						else
							line = "\t" + line.preTrim(" ");
						line = EscapeHTML(line);
						if( (i + 1) == item['line'] )
							line = "<b style=\"color:#cff; background-color:#688\">$line</b>";
						block += "${(i + 1)}: " + line + "<br >";
					}
					postfix += "Code:<br /><pre style=\"background-color:#acc; margin-left: 20px;\">$block</pre>";
					if( item.keyExists('variables') ) {
						array variable_list = [];
						item['variables'].map() using ( name, value ) {
							string real_name = name[name.index(':') + 1..];
							if( real_name[0] != '!' ) {
								string real_contents = EscapeHTML((value isa string ? "'$value'" : "$value"));
								variable_list[real_name] = "<b>$real_name:</b> " + (real_contents.length() > 80 ? "<blockquote style=\"margin:0px; margin-left:20px; padding-left:10px; border-left:2px #000 solid;\">$real_contents</blockquote>" : "$real_contents<br />");
							}
						};
						if( variable_list ) {
							postfix += "Variables:<br /><div style=\"background-color:#cac; margin-left: 20px; margin-top: 20px; margin-bottom: 20px;\"><tt>" +
											variable_list.keys().sort().join('') using ( key ) { return variable_list[key]; } + 
										"</tt></div>";
						}
					}
					
					postfix = ": <span style=\"color:#363;cursor:pointer;\" onclick=\"var b = document.getElementById('Backtrace.Level.$count'); if(b.style.display=='none') b.style.display='block'; else b.style.display='none';\">Toggle &darr;</span><br /> <div id=\"Backtrace.Level.$count\" style=\"display:${(count == 1 ? 'block' : 'none')}\">$postfix</div>";
				} handle {
					postfix = "<br />Unable to read ${item['file']}<br />";
				}
			}
			doneFirst = true;
			return "$prefix$link in " + (item['static'] ? '<i>static</i> ' : '') + "function <b>" + item['container'] + '.' + item['function'] + "</b>$postfix";
		};
	}
}
/**
 * @class Application
 * @brief This is the parent application class that manages page and action dispatch.
 */
class Application {
	
	/**
	 * @variable NoAction
	 * @type     string
	 * @brief    This is the internal tag when there is no action on the application request.
	 * @static
	 */
	static final string NoAction = "_______________NoAction_______________";

	/**
	 * @variable name
	 * @type     string
	 * @brief    The name of the application.
	 */
	string realName;
	string virtualName;
	array  actionHandlers;
	string action;
	/**
	 * @variable commands
	 * @type     array
	 * @brief    The commands given to the the application.
	 */
	array  commands;
	/**
	 * @variable parameters
	 * @type     array
	 * @brief    The query parameters passed to the application.
	 * @static
	 */
	array  parameters;
	object renderer;
	string error;
   
	/**
	 * @variable topLevel
	 * @type string
	 * @brief Hold the value for the top level application url with no actions or commands */
	string topLevel = '';
	/** 
	 */
	string urlPath;
	string filePath;
	
	void pushedActionData;
	
	/**
	 * @function constructor
	 * @brief The constructor of the Application class
	 * @declaration function constructor( string app )
	 * @param string app The name of the application
	 */
	function constructor( string app ) {
		log('Application.constructor', "Creating application $app");
		.realName = app;
		.registerPage('Login');
		.registerPage('ApplicationAdmin');
		.registerPage('ReportedErrors');
		.registerAction('Logout', closure( commands, parameters ) {
			Permissions.invalidateUser();
			if( commands ) {
				Application.performAction( Array.join( commands, "/" ) );
			} else {
				redirects.check('');
			}
		} );
		.registerAction('Blank', closure( commands, paramters ) {
			request.contentType('text/html; charset=UTF-8');
			GUIKit.isBackgroundEvent = true;
			return '<html></html>';
		} );
		
		if( Config.Debug ) {
			.registerPage('TestBench');
			.registerAction( 'WebframeworkClearCache', closure( commands, paramters ) {
				Cache.clear(commands.join('/'));
				Application.performAction(commands.join('/'));
			});
			.registerPage( 'WebframeworkQuickQuery' );
		}
		application = self;
		
		GUIKit.loadComponent('Hotkeys');
	}
	function allowDownload( string name ) {
		return true;
	}
	function fullAction {
		return application.action; // + (application.commands ? '/-/' + application.commands.join('/') : '');
	}
	
	/**
	 * @function registerAction
	 * @brief Register an action on the application with a given name.
	 * @description This function allows you to provide a closure that will called when an action is invoked.
	 * @declaration function registerAction( string action, object handler )
	 * @example	
	 */
	function registerAction( string action, object handler ) {
		if( action != 'MCAM' ) {
			.actionHandlers[action] = handler;
		} else {
			raise new Error("Action $name is a reserved action. Please choose another name!");
		}
	}
	function registerAction( string action ) {
		if( action != 'MCAM' ) {
			.actionHandlers[action] = recipient();
		} else {
			raise new Error("Action $name is a reserved action. Please choose another name!");
		}
	}
	/**
	 * @function registerPage
	 * @declaration function registerPage( string page )
	 * @brief This takes the name of a page resource and registers it within the system so that it can be called.
	 * @param string page Parameter Description
	 */
	array registeredPages;
	function registerPage( string page ) {
		.registeredPages[page] = true;

		.registerAction( page, closure ( commands, parameters ) {
			return GUIKit.Page.load( page, commands, parameters );
		} );
	}
	function invokeActualAction( void handler ) {
		if( handler isa object ) 
			return handler.invoke( .commands, .parameters );
		else if( handler isa string ) 
			return GUIKit.Page.load( handler, .commands, .parameters );
		return '';
	}
	function invokeAction( string action, array commands, array parameters ) {
		array DebugHandlers = [ 'WebframeworkClearCache' => true, 'WebframeworkQuickQuery' => true ];
		array BuiltInGlobals = [ 'Blank' => true, 'TranslationStrings' => true, 'ReportedErrors' => true, 'TestBench' => true ];
		void handler;

		if( .actionHandlers.keyExists(action) )
			handler = .actionHandlers[action];
		else if( .registeredPages.keyExists(action) ) 
			handler = action;
			
		.action = action;
		.commands = commands;
		.parameters = parameters;
		.pushedActionData = Session.valueForAction(action);
		
		if( handler ) {
			object user;
			
			metrics.checkpoint("invokeAction:$action: fetching user object");
			user = Permissions.fetchUserObject();
			if( user.username != 'guest' ) {
				metrics.checkpoint("invokeAction: setting cookies: $user");
				user and Permissions.setValidationCookies(user);
			}
			if( BuiltInGlobals.keyExists(action) or (DebugHandlers.keyExists(action) and Config.Debug) or Permissions.userAllowedForResource( user, action ) ) {
				metrics.checkpoint("invokeAction:$action: running handler invoke");
				return .invokeActualAction(handler);
			}
			else if( user != null ) {
				if( true ) {
					Application.performAction("Login/-/$action" + (commands ? "/-/" + Array.join( commands, "/" ) : ""));
				} else {
					return .defaultErrorHandler(I('{0:username}, you do not have permission to access the resource {1:resource}. Please try logging in: {2:login link}').expand(
						HTML.bold(Permissions.fetchUserObject().toName()), HTML.bold(action),
						"<a href=\"" + uriForApplicationAction("Login/-/$action/" + Array.join( commands, "/" )) + "\">" + I('Login') + "</a>"
					));
				}
			}
			return '';
		}
		.failSafeErrorPage( new Error('Unable to invoke handler for action: {0:action}'.expand(action)), 'Error loading action ' + action, false, false );
		return .defaultErrorHandler( I('Unable to invoke handler for action: {0:action} - Please make sure you report this error so support can locate why this happened.').expand(action) );
	}

	/**
	 * @function defaultErrorHandler
	 * @declaration function defaultErrorHandler( string error )
	 * @param string error The error message to be displayed
	 * @return The error page with the message added as a string
	 */
	function defaultErrorHandler( string error ) {
		.error = error;
		allowedToStoreSession = false; // This stops us smashing the current session if there is a background error
		return GUIKit.Page.load( 'Error', .commands, .parameters );
	}
	function failSafeErrorPage( object error, string message ) {
		return .failSafeErrorPage( error, message, true, true );
	}
	function customErrorReportValues {
		object user = Permissions.fetchUserObject();
		return 'Logged in user: ' + user.toName() + ' (' + user.username + ')<br />' + Core.DumpValues("<br />");
	}
	function successFullErrorReport( object report ) {
		
	}
	function failSafeErrorPage( object error, string message, boolean exit, boolean print_output ) {
		
		string capturedError = error.str;
		string bt = error.backtrace().backtraceToHTML();
		string wasAbleToSaveMessage = '';
		string output = '';
		
		monitor {
			object o = new webframework.RecordedError();
			string customErrorValue = .customErrorReportValues();
			o.setValue('message', message);
			o.setValue('action', application.action);
			o.setValue('backtrace', bt);
			o.setValue('custom_values', customErrorValue);
			o.setValue('timeOccurred', Date.GMTnow());
			o.setValue('error', capturedError);
			o.save();
			wasAbleToSaveMessage = I('Error was successfully reported. Please contact support giving them the id {0:id} and as much information as possible including what you were doing. This will help them track the problem more efficiently.').expand('' + o.id);
			.successFullErrorReport( o );
		} handle {
			wasAbleToSaveMessage = I('Error was not-successfully reported: {0:error}. When contacting support please provide the following error message: {1} and as much information as possible including what you were doing. This will help them track the problem more efficiently.').expand(err.str, "$message: $capturedError");
		}

		if( Config.Debug ) {
			output = HTML.html(
							HTML.head(HTML.title("Error $message")) +
							HTML.body(
										HTML.titleBox("Error $message",
													  "<i>$capturedError</i><p>" +
														HTML.blockquote(bt)
													 ) +
										HTML.div(wasAbleToSaveMessage)
									 )
						 );
		} else {
			output = HTML.html(
							HTML.head(HTML.title("Error")) +
							HTML.body(
										HTML.div(HTML.bold("There has been a non-recoverable error.<p />")) +
										HTML.div(wasAbleToSaveMessage)
									 )
						 );
		}
		if( print_output )
			print(output);
		if( exit )
			Core.exit();
	}
	static function performAction( string action ) {
		log('Application.performAction', action);
		if( Cache.display )
			ViewState.store(application.action);
		Core.Shutdown();
		request.location( application.topLevel + (action ? "/" + action : '') );
		Core.exit();
	}
	static function performActionWithData( string action, void data ) {
		log('Application.performAction', action);
		Session.pushValueToAction( action, data );
		if( Cache.display )
			ViewState.store(application.action);
		Core.Shutdown();
		request.location( application.topLevel + (action ? "/" + action : '') );
		Core.exit();
	}
	
	static function defaultValueForType( string type ) {
		switch( type ) {
			case 'number':
				return "0";
			case 'string':
				return "''";
			case 'array':
				return "[]";
			case 'object':
				return "null";
			case 'boolean':
				return "false";
		}
		return "''";
	}
	static array sessionVariables;
	directive session( string type, string name )
		.sessionVariables[name] = type;
	
	function fetchSessionData 
		;
	function storeSessionData
		;
	static constructor {
		if( .sessionVariables ) {
			string variableDecl, fetchSessionCode, storeSessionCode, newClass;
			.sessionVariables.map() using ( name, type ) {
				variableDecl += "$type $name; ";
				fetchSessionCode += ".$name = Session.value('$name',${.defaultValueForType(type)});";
				storeSessionCode += "Session.storeValue('$name',.$name);";
			};
			newClass = "class modifies ${Class.name(self)} {
				$variableDecl 
				function fetchSessionData { $fetchSessionCode }
				function storeSessionData { $storeSessionCode }
			}";
			log('application.constructor', "eval session data: $newClass");
			eval( newClass );
			log('application.constructor', "eval session data done");
		}
	}
	static function validateConfigurationPaths() {
		array problems = [];
		[ 'Config.PublicPath' => Config.PublicPath, 
		  'Config.DataDirectoryPath' => Config.DataDirectoryPath, 
		  'Config.CachePath' => Config.CachePath ].map() using ( key, path ) {
			if( not Posix.stat(path) ) {
				problems[] = I('Unable to find path "{0:file system directory}" specified by configuration value {1:a configuration value}. Please check it exists!').expand(path, key);
			}
		};
		if( problems )
			raise new Error(problems.join(',<br/>'));
	}
	function applicationLoaded {
		
	}
	static function run() {
		monitor {
			void klass = self;
			application = new klass();
			log('core', "Core Starup");
		} handle( error ) {
			println(I('Fatal error trying to run application: Please contact support and give them this message: "{0:message}"').expand(error.str));
			println(error.backtrace().backtraceToHTML());
		} else {
			monitor {
				if( webframeworkConsoleTool ) {
					Console.println("Console tool; returning to tool");
					return;
				}
				if( Core.Startup( application ) ) {
					metrics.checkpoint("Going for configuration startup");
					// Load the LocalConfiguration file if we have it
					monitor {
						include( application.filePath + "Support/LocalConfiguration.feh" );
						metrics.checkpoint("Including Location Configuration");
						Config.loadConfiguration();
					} handle {
						metrics.checkpoint("No Local Configuration File");
					}
		
					/* Load the application */
	 				if( application ){
						string output = '';
						string action = application.action;
						object imageMatch = new Regexp("<img.*?src=\"\".*?>");

						wf_profile('application-run') using {
							GUIKit.loadComponent('Component');

							wf_profile('applicationLoaded()') using {
								application.applicationLoaded();
							};
							
							/* Check to see if we have any redirects required */
							redirects.check( action );

							/* Run the application command */
							metrics.checkpoint("Running Application Action");
							monitor {
								/* FIX ME */
								wf_profile('check config paths') using {
									.validateConfigurationPaths();
								};
								
								metrics.checkpoint("Running handler for ${application.action}");
								application.fetchSessionData();
								output = wf_profile("invoke action '${application.action}'") using { return ("" + application.invokeAction( application.action, application.commands, application.parameters )); };
								metrics.messages = [];
								metrics.checkpoint("Done running handler for ${application.action}");
							} handle ( error ) {
								application.failSafeErrorPage(error, "Invoking '${application.action}'");
							}
							metrics.checkpoint("Outputting Information");

							output = imageMatch.replaceAll(output) using ( match ) {
								return "<img src=\"${uriForImageResource('critical-error.png')}\"><!-- ${match.match()} -->";
							};

							print( output );
							metrics.checkpoint("Done!");
							if( Config.Debug and (not GUIKit.isBackgroundEvent) ) {
								debugOutput = [];
								metrics.checkpoints().each() using ( checkpoint ) {
									debug(__FILE__,__LINE__, checkpoint);
								};
								if( debugOutput ) {
									print(HTML.javascriptChunk(collapseDebugOutput()));
								}
							}
							monitor {
								request.flush();
							} handle {
								println('<h1>Please update mod_ferite and restart apache</h1>');
							}
						};
						if( not GUIKit.isBackgroundEvent ) {
							print("<!-- \n");
							profileOutput.each() using ( profile ) {
								print("$profile\n");
							};
							print("  --> \n");
						}
						Core.Shutdown();
					}
				}
			} handle( error ) {
				application.failSafeErrorPage(error, "(Critical)");
			}
		}
	}
	function quickInstallApplication( array actionList ) {
		object app, zone;
		array users, resources, zones;
		
		if( (app = Interface.Application.byName(.realName)) == null ) {
			/* Create the app */
			app = new Interface.Application();
			app.setValue('name', .realName);
			app.setValue('origin', 'webframework');
			app.setValue('useCount', 0);
		} else {
			app  = Interface.Application.load(app.id);
		}
		
		zones = app.zones;
		if( zones.size() == 0 ) {
			if( not (zone = Permissions.fetchApplicationZone('main')) ){
				zone = Permissions.createApplicationZone('main', [], []);
			}
			app.setValue( 'zones', [ zone ] ); 
		} else {
			zone = zones[0];
		}
		
		actionList.each() using ( label ) {
			object resource = Permissions.fetchApplicationResource(label);
			if( not resource ) {
				resource = Permissions.createApplicationResource(label);
				resource.setValue('name', label);
				resource.setValue('type', 'page');
				zone.resourcesAdd(resource);
			}
		};
			
		[ 'guest' ].each() using ( label ) {
			object user = Permissions.fetchUserObject(label);
			if( not user ) {
				user = Permissions.createApplicationUser(label, '');
				zone.usersAdd(user);
			}
		};
		app.save();
	}
	
	function toHTML {
		return '-';
	}
	function currentUserInformation {
		object currentUser = Permissions.fetchUserObject();
		string name = currentUser.toName();
		if( name == 'guest' ) {
			name = "<span style=\"color: #FCC\">$name</span>";
		} else {
			name = "<span style=\"color: #CFC\">$name</span>";
		}
		return I('User: <b>{0:user}</b>').expand(name);
	}
	
	static function version( string name ) {
		return Cache.fetch("application:$name", 0) using {
			object app = Interface.Application.byName(name);
			if( not app ) {
				return 0;
			}
			return app.version;
		};
	}
	
	static function create( string name ) {
		object app = Interface.Application.byName(name);
		if( not app ) {
			app = new Interface.Application();
		} else {
			app = Interface.Application.load(app.id);
		}
		deliver( app );
		app.save();
		Cache.store("application:${app.name}", app.version);
	}
}
/**
 * @end
 */
