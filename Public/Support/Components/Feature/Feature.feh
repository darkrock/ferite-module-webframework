namespace modifies GUIKit {
	
	class FeatureView extends GUIKit.AbstractContainerComponent {
	
		[attribute string tag		 '' 'The feature tag this feature view is linked to'];

		[attribute string equals	  '' 'Whether the feature applied value equals this value'];
		[attribute string greaterThan '' 'Whether the feature applied value is greater than this value'];
		[attribute string lessThan	'' 'Whether the feature applied value is less than this value'];

		[attribute string exclude	 '' 'Comma separated list of actions to fail on'];
		
		function resolveLocalToFeatureState( void state, string value ) {
			if( state isa number ) {
				return value.toNumber();
			} else if( state isa boolean ) {
				return (value == 'true' ? true : false);
			} else {
				return value;
			}
		}
		
		function visible() {
			boolean shouldDisplay = false;
			void	state, localState;
			array   excludelist = .exclude().toArray(',');
			
			
			if( excludelist.valueExists(application.action) )
				return false;
			
			debug("looking for ${.tag()}");
			
			monitor {
				state = Feature.state(.tag());
			} handle( error ) {
				shouldDisplay = false; /* We disable first */
			} else {
				if( .equals() ) {
					localState = .resolveLocalToFeatureState(state, .equals());
					if( localState == state ) {
						shouldDisplay = true;
					}
				} else if( .greaterThan() ) {
					localState = .resolveLocalToFeatureState(state, .greaterThan());
					if( localState < state ) {
						shouldDisplay = true;
					}
				} else if( .lessThan() ) {
					localState = .resolveLocalToFeatureState(state, .lessThan());
					if( localState > state ) {
						shouldDisplay = true;
					}
				} else if( state ) {
					debug("state ${.tag()} = true");
					shouldDisplay = true;
				} else {
					debug("state ${.tag()} = false");
					shouldDisplay = false;
				}
			}
			return shouldDisplay;
		}
		function enableDebug {
			return false;
		}
	}
}