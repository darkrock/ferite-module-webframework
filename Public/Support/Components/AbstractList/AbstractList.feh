namespace modifies GUIKit {
	
	class CSimpleListItem extends GUIKit.AbstractComponent {
		[attribute boolean instanceSeparator false 'Whether the item is a separator within the container'];
		
		function render {
			return .textValue;
		}
	}

	class CSimpleListDataSource {
		string _classname;
		array  _items, _selected, _separators, _order;
		object _list;
		
		constructor( object list, string klass ) {
			._list = list;
			._classname = klass;
			.clear();
		}
		function clear {
			._items = [];
			._selected = [];
			._order = [];
		}
		function _create {
			void klass = Class.locate('GUIKit.' + ._classname);
			object item = new klass();
			return item;
		}
		function _add( array attributes ) {
			if( attributes.keyExists('instanceSelected') and attributes['instanceSelected'] isa string ) {
				string value = attributes['instanceSelected'];
				attributes.del('instanceSelected');
				attributes['instanceSelected'] = ._list.stringToBoolean(value);
			}
			if( attributes.keyExists('instanceSelected') and 
				attributes['instanceSelected'] == true and 
				(not ._selected.valueExists(attributes['instanceID'])) ) {
				._selected[] = attributes['instanceID'];
			}
			if( attributes.keyExists('instanceSeparator') and attributes['instanceSeparator'] isa string ) {
				string value = attributes['instanceSeparator'];
				attributes.del('instanceSeparator');
				attributes['instanceSeparator'] = ._list.stringToBoolean(value);
			}
			if( attributes.keyExists('instanceSeparator') and 
				attributes['instanceSeparator'] == true and 
				(not ._separators.valueExists(attributes['instanceID'])) ) {
				._separators[] = attributes['instanceID'];
			}
			._items['' + attributes['instanceID']] = attributes;
			._order[] = attributes['instanceID'];
		}
		function append( object node ) {
			if( node instanceof XML.Element ) {
				return ._add( GUIKit.AbstractComponent.attributesFromXMLNode( self, node ) );
			}
		}
		function append( array _values ) {
			array keys, values = _values, _keys = values.keys();

			_keys.each() using ( key ) {
				keys[key.toLower()] = key;
			};
			[ 'ID', 'Selected', 'Separator' ].each() using ( key ) {
				if( keys.keyExists(key.toLower()) ) {
					values["instance$key"] = values[keys[key.toLower()]];
					values.del(keys[key.toLower()]);
				}
			};
			return ._add( values );
		}
		
		function items( string component_id, array component_attributes ) {
			array _items;
			object item = ._create();
			._order.each() using ( id ) {
				if( ._items.keyExists("$id") ) {
					array attributes = ._items["$id"];
					// Setup the objects values
					item.processAttributes(attributes);
					// Setup the selected
					(._selected.valueExists(item.instanceID()) ? item.setInstanceSelected(true) : item.setInstanceSelected(false));
					// Setup the seperator
					(._separators.valueExists(item.instanceID()) ? item.setInstanceSeparator(true) : item.setInstanceSeparator(false));
					// Setup a click event
					//  - Setup the default custom extra incase we have any events we must process
					if( ._list.eventHooks and item.instanceSeparator() == false ) {
						item.id = ._list.subID('' + item.instanceID());
						._list.setDefaultCustomExtra(item.instanceID());
						item.setCustomEventHooks( ._list.eventHooks(item) );
					}
					_items[] = GUIKit.ViewTemplate.renderPath( ._list.itemTemplate(), [ 
											'componentID' => component_id,
											'componentAttributes' => component_attributes,
											'instanceID' => item.instanceID(),
											'instanceSeparator' => item.instanceSeparator(),
											'instanceRender' => item.render()
										]);
				}
			};
			return _items;
		}
		function selected
			return ._selected;
		function setSelected( array ids )
			._selected = ids;
		function order
			return ._order;
		function setOrder( array ids ) 
			._order = ids;
	}

	class CAbstractList extends GUIKit.AbstractComponent {

		[attribute string itemclass 'CSimpleListItem' 'The class to use to initialise items within the list'];
		
		[attribute numerical_list selected 'The selected items'];
		[attribute numerical_list order    'The order of the list items'];
		object source;

		function defaultWidth()
			return "";

		function _createDataSource {
			if( not .source ) {
				.source = new GUIKit.CSimpleListDataSource( self, .itemclass() );
			}
		}
		function isContainer( object element ) {
			if( element and element.hasChildren() ) {
				array children = element.getChildren();
				._createDataSource();
				children.each() using ( child ) {
					if( child.getElementName() == 'item' ) {
						.source.append( child );
					}
					child.removeSelf();
				};
				.setSelected(.source.selected());
				.setOrder(.source.order());
			}
			return false;
		}
		function setDataSource( array new_source ) 
			return .setDataSource( new_source, true );
		function setDataSource( array new_source, boolean resetState ) {
			._createDataSource();
			.source.clear();
			new_source.each() using ( item ) {
				.source.append( item );
			};
			return .setDataSource(.source, resetState);
		}
		function setDataSource( object new_source )
			return .setDataSource( new_source, true );
		function setDataSource( object new_source, boolean resetState ) {
			.source = new_source;
			if( resetState or .order().size() == 0 ) {
				.setSelected(.source.selected());
				.setOrder(.source.order());
			} else {
				.source.setSelected(.selected());
				.source.setOrder(.order());
			}
		}
		function setSelectedItem( number id ) {
			if( .source ) {
				.source.setSelected( [id] );
			}
		}
		function selectedItem {
			if( .source and .source._selected ) {
				return .source._selected[0];
			}
			return -1;
		}
		function selectedItems {
			if( .source ) {
				return .source._selected;
			}
			return [];
		}
		function component 
			return '';
		function template
			return GUIKit.componentByName(.component()).pathForComponentResource(.component() + '.template');
		function itemTemplate
			return GUIKit.componentByName(.component()).pathForComponentResource(.component() + 'Item.template');
		function attributeChanged( string id ) {
			._createDataSource();
			if( id == 'selected' and .source ) {
				.source.setSelected(.selected());
			} else if( id == 'order' and .source ) {
				.source.setOrder(.order());
			} else if( id == 'itemclass' and .source ) {
				.source._classname = .itemclass();
			}
		}
		function handleFormValue( string value ) {
			._createDataSource();
			.setSelected(value);
		}
		function handleFormValue( array value ) {
			._createDataSource();
			if( value.keyExists('selected') )
				.setSelected(value['selected']);
			if( value.keyExists('order') ) 
				.setOrder(value['order']);
		}
		function renderEvent( string event ) {
			if( event == GUIKit.EvChange )
				return true;
			return false;
		}
		function render() {
			if( .visible() ) {
				array  values = .generateTemplateAttributes('wf' + .component());
				if( .source ) {
					values['Items'] = .source.items(.id, values);
					values['Selected'] = .source.selected();
				}
				return GUIKit.ViewTemplate.renderPath( .template(), values );
			}
			return "";
		}
	}
}
