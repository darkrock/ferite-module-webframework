namespace modifies GUIKit {
	
	class CTextfield extends GUIKit.CFormControl {
		
		[attribute number length 0 'Maxiumum length of characters'];

		[mcam_attribute string textValue 'text-value'];
		
		static function formValue( void value ) {
			if( value isa string )
				return value;
			if( value isa array ) {
				if( not value.keyExists('new') ) {
					return '';
				} else {
					return value['new'];
				}
			}
			return '';
		}
		
		function handleFormValue( void value ) {
			.setTextValue(GUIKit.CTextfield.formValue(value));
		}
		
		function onKeyPress() {
			if( .defaultAction and Cache.components.keyExists(.defaultAction) ) {
				return "onkeypress=\"var event = arguments[0] || window.event; if(captureEnterKey(event)){ _('${.id}').action('change'); return DefaultAction('${.defaultAction}'); } else { return true; }\"";
			} 
			return "onkeypress=\"var event = arguments[0] || window.event; return !captureEnterKey(event)\"";
		}
		
		function render() {
			if( .visible() ) {
				array values = .generateTemplateAttributes('wfTextfield');
				object component = GUIKit.componentByName('Textfield');
				string path = component.pathForComponentResource('Textfield.template');
				values['Style'] = (values['Style'] ? values['Style'] + ';' : '') + 'cursor:text;';
				values['EventCode'] = .onKeyPress();
				values['TextValue'] = Regexp.replaceAll('"', values['TextValue'], '&quot;');
				values['JavascriptSafeTextValue'] = JSON.escape(values['TextValue']);
				if( .length() == 0 ) {
					values.del('length');
				}
				return GUIKit.ViewTemplate.renderPath( path, values );
			}
			return "";
		}
	}
}

