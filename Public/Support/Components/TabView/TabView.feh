namespace modifies GUIKit {
	class TabViewItem extends GUIKit.ToggleLabel {
		
		[attribute boolean selected false 'Whether the tab has been selected'];
		
		function constructor() {
			super();
			.setTextJustify( "center" );
		}
		function isContainer( object node )
		   return true;
		function handleChildren( array children, object renderEngine );
		function preProcessContainerContents( string output )
			return output;
	   
		function defaultWidth()
			return '';
		
		function generateAttributes() {
			array a = super.generateAttributes();
			a['Selected'] = (.selected() ? "true" : "false");
			return a;
		}
		function renderContainerStart() {
			if( .visible() ) {
				array values = .generateTemplateAttributes('wfTabView'), items;
				object component = GUIKit.componentByName('TabView');
				string path = component.pathForComponentResource('TabViewItem.Top.template');
				return GUIKit.ViewTemplate.renderPath( path, values );
			}
			return "";
		}

		function renderContainerEnd() {
			if( .visible() ) {
				array values = .generateTemplateAttributes('wfTabView'), items;
				object component = GUIKit.componentByName('TabView');
				string path = component.pathForComponentResource('TabViewItem.Bottom.template');â€­
				return GUIKit.ViewTemplate.renderPath( path, values );
			}
			return "";
		}
		
	}
	class TabViewToolbar extends GUIKit.AbstractComponent {
		function isContainer( object node )
		   return true;
		function handleChildren( array children, object renderEngine );
		function preProcessContainerContents( string output )
			return output;
	   
		function defaultWidth()
			return '';
		
		function renderContainerStart() {
			if( .visible() ) {
				array values = .generateTemplateAttributes('wfTabView'), items;
				object component = GUIKit.componentByName('TabView');
				string path = component.pathForComponentResource('TabViewToolbar.Top.template');
				return GUIKit.ViewTemplate.renderPath( path, values );
			}
			return "";
		}

		function renderContainerEnd() {
			if( .visible() ) {
				array values = .generateTemplateAttributes('wfTabView'), items;
				object component = GUIKit.componentByName('TabView');
				string path = component.pathForComponentResource('TabViewToolbar.Bottom.template');
				return GUIKit.ViewTemplate.renderPath( path, values );
			}
			return "";
		}
	}
	class TabView extends GUIKit.AbstractContainerComponent {
		[attribute boolean showCloseTabButton false 'If a close button should be displayed on each tab'];
		[attribute string addTabButtonIcon '' 'When this icon is clicked a new tab is opened'];
		[attribute string customTabRender '' 'Name of custom tab render function'];
		
		function handleChildren( array children, object renderEngine ) {
			.contents = [];
			Array.each( children ) using ( child ) {
				if( GUIKit.XMLTools.nodeIsSpecificWFComponent( child, 'CTabViewItem') ) {
					string attr = GUIKit.XMLTools.nodeHasAttribute( child, 'ID' );
					if( attr ) {
						.contents[] = attr;
						return;
					}
				} else if( GUIKit.XMLTools.nodeIsSpecificWFComponent( child, 'CTabViewToolbar') ) {
					string attr = GUIKit.XMLTools.nodeHasAttribute( child, 'ID' );
					if( attr ) {
						return;
					}
				}
				child.removeSelf();
			};
		}

		[attribute string activeTab 'The tab to make active'];
		function handleFormValue( string value ) {
			.setActiveTab(value);
		}
		
		function renderContainerStart() {
			if( .visible() and Array.size(.contents) ) {
				array values = .generateTemplateAttributes('wfTabView'), items;
				object component = GUIKit.componentByName('TabView');
				string path = component.pathForComponentResource('TabView.Top.template');

				Array.each( .contents ) using ( id ) {
					object item = Cache.components[id];
					if( item.visible() ) {
						item.setStyleClass(.styleClass);
						item.setSelected(false);
						if( item.id == .activeTab() ) {
							item.setSelected(true);
						}
						items[] = item.generateTemplateAttributes('wfTabView');
					}
				};
				if( .activeTab() == '' ) {
					string id = items[0]['ID'];
					object item = Cache.components[id];
					item.setSelected(true);
					.setActiveTab(id);
				}
				values['Tabs'] = items;
				values['SelectedID'] = .activeTab();
				values['showAddTabButton'] = false;
				if( .addTabButtonIcon() ) {
					values['showAddTabButton'] = true;
					values['addTabButtonIcon'] = uriForImageResource( .addTabButtonIcon() );
				}
				return GUIKit.ViewTemplate.renderPath( path, values );
			}
			return "";
		}

		function renderContainerEnd() {
			if( .visible() and Array.size(.contents) ) {
				array values = .generateTemplateAttributes('wfTabView');
				object component = GUIKit.componentByName('TabView');
				string path = component.pathForComponentResource('TabView.Bottom.template');
				values['SelectedID'] = .activeTab();
				return GUIKit.ViewTemplate.renderPath( path, values );
			}
			return "";
		}
	}
}
