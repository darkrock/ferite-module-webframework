namespace modifies GUIKit {
	class CSimpleTableColumnItem extends GUIKit.AbstractComponent {
		function render {
			return .textValue;
		}
	}
	
	class CSimpleTableDataSource {
		object _table;
		array _rows;
		
		function constructor( object table ) {
			._table = table;
			.clear();
		}
		
		function clear
			._rows = [];
		
		function append( array _row )
			._rows[] = _row;
		
		function set( array rows )
			._rows = rows;
		
		function _create( string className ) {
			if( className != 'CSimpleTableDataSource' ) {
				void klass = Class.locate('GUIKit.' + className );
				object item = new klass();
				item.cell = true;
				return item;
			}
			return null;
		}
		
		function columnHeaders {
			array columnHeaders = [];
			
			._table.contents.each() using ( id ) {
				object column = Cache.components[id];
				string textValue = column.textValue();
				string style = 'padding:4px;';
				
				if( not textValue ) {
					textValue = '&nbsp;';
				}
				if( column.size.width ) {
					style += "width:${column.size.width};";
				}
				columnHeaders[] = [ 
					'ID' => id, 
					'TextValue' => textValue, 
					'Style' => style, 
					'MaxLength' => column.maxLength(), 
					'IgnoreClicks' => column.ignoreClicks(), 
					'Sortable' => column.sortable(),
					'Width' => column.size.width,
					'Visible' => '' + column.visible()
				];
			};
			
			return columnHeaders;
		}
		
		function rows {
			array rows = [];
			number _rowCount = ._rows.size();
			array _columnHeaders = [];
			array _columnComponents = [];
			array _itemRendersColumn = [];
			
			._table.contents.each() using ( id ) {
				object column = Cache.components[id];
				string className = column.itemClass();
				object columnItem = ._create( className );
				_columnHeaders[] = column;
				_columnComponents[] = columnItem;
				_itemRendersColumn[] = column.itemRendersColumn();
			};
			
			for( number i = 0; i < _rowCount; i++ ) {
				string id = '';
				array _columns = ._rows[i];
				array rowColumns = [];

				if( _columns.keyExists('table-row-id') ) {
					id = "${_columns['table-row-id']}";
					_columns.del('table-row-id');
				}

				for( number j = 0; j < _columnComponents.size(); j++ ) {
					object header = _columnHeaders[j];
					void   attributes = _columns[j];
					object component = _columnComponents[j];
					string itemRender;
					string style = '';
					
					if( component ) {
						if( attributes isa array ) {
							component.processAttributes( attributes );
						} else {
							component.processAttributes([ 'TextValue' => attributes ]);
						}
						itemRender = component.render();
					} else {
						if( attributes isa array ) {
							itemRender = '' + attributes['TextValue'];
						} else {
							itemRender = '' + attributes;
						}
					}
					
					if( header.size.width ) {
						style += "width:${header.size.width};";
					}
					if( header.disableWordWrap() ) {
						style += 'white-space:nowrap;';
					}
					if( not header.ignoreClicks() ) {
						style += 'cursor:pointer;';
					}
					style += header.style();

					rowColumns[] = [ 
						'ItemRender' => (itemRender ? itemRender : '&nbsp;'), 
						'ItemRendersColumn' => _itemRendersColumn[j],
						'IgnoreClicks' => (header.ignoreClicks() ? ' onclick="CancelEvent(event); return false"' : ''),
						'Style' => style
					];
				};
				rows[] = [ 'ID' => id, 'Columns' => rowColumns ];
			};
			return rows;
		}
	}
	
	class CTableColumn extends GUIKit.AbstractComponent {
		[attribute string  itemClass 'CSimpleTableColumnItem' 'The class to use to initialise items in the column'];
		[attribute boolean itemRendersColumn false            'If the item renders the column or if it should be handled by this component'];
		[attribute number  maxLength 0                        'Maximum character length for an attribute'];
		[attribute boolean ignoreClicks false                 'Whether cells within this column accept clicks'];
		[attribute boolean sortable true                      'Can the column be sorted'];
		[attribute string  sorted                             'Is column sorted?'];
		[attribute boolean secondarySort false                'Whether the colunn is the secondary sort column'];
		[attribute string  map ''                             'Column ID to data map'];
		[attribute boolean disableWordWrap false              'Whether or not the column should support word-wrap'];
	}
	
	class CTable extends GUIKit.AbstractContainerComponent {
		object source;
		
		[attribute boolean sortable true 'Whether or not the table can be sorted'];
		[attribute boolean autoSort false 'Whether the table should automatically note a sort change after data update'];
		[attribute boolean showHeader true 'Whether the table should show the header'];
		[attribute string  defaultForegroundColour '#000'      'The default foreground colour for a table row'];
		[attribute string  defaultBackgroundColour '#FFF'      'The default foreground colour for a table row'];


		function addColumn( string columnName, string ID, string map, string sorted, boolean secondarySort ) {
			object column;
			string id;
			
			if( columnName )
				id = ID;
			else
				id = .id + '_Column' + .contents.size();
			
			if( not .contents.valueExists( id ) ) {
				if( Cache.components.keyExists( id ) )
					column = Cache.components[id];
				else
					column = new GUIKit.CTableColumn( id );
			
				column.setTextValue( columnName );
				column.setItemClass('CSimpleTableColumnItem');
				column.setID(ID);
				column.setMap(map);
				column.setSorted(sorted);
				column.setSecondarySort(secondarySort);
			
				.contents[] = id;
				return column;
			} else {
				return Cache.components[id];
			}
			return null;
		}

		function addColumn( string columnName, string ID, string map, string sorted, boolean secondarySort, string width ) {
			object column;
			string id;
			
			if( columnName )
				id = ID;
			else
				id = .id + '_Column' + .contents.size();
			
			if( not .contents.valueExists( id ) ) {
				if( Cache.components.keyExists( id ) )
					column = Cache.components[id];
				else
					column = new GUIKit.CTableColumn( id );
			
				column.setTextValue( columnName );
				column.setItemClass('CSimpleTableColumnItem');
				column.setID(ID);
				column.setMap(map);
				column.setWidth(width);
				column.setSorted(sorted);
				column.setSecondarySort(secondarySort);
			
				.contents[] = id;
				return column;
			} else {
				return Cache.components[id];
			}
			return null;
		}

		
		function addColumn( string columnName, string itemClass ) {
			object column;
			string id;
			
			if( columnName )
				id = .id + '_' + columnName;
			else
				id = .id + '_Column' + .contents.size();
			
			if( not .contents.valueExists( id ) ) {
				if( Cache.components.keyExists( id ) )
					column = Cache.components[id];
				else
					column = new GUIKit.CTableColumn( id );
			
				column.setTextValue( columnName );
				column.setItemClass( itemClass );
			
				.contents[] = id;
				return column;
			} else {
				return Cache.components[id];
			}
			return null;
		}
		
		function addColumn( string columnName ) {
			return .addColumn( columnName, 'CSimpleTableColumnItem' );
		}
		
		function _createDataSource {
			if( not .source )
				.source = new GUIKit.CSimpleTableDataSource( self );
		}
		
		array totals;
		function setTotals( array totals )
			.totals = totals;

		function setDataSource( array source ) {
			._createDataSource();
			.source.clear();
			.source.set( source );
		}
		
		function handleChildren( array children, object renderEngine ) {
			.contents = [];
			children.each() using ( child ) {
				if( GUIKit.XMLTools.nodeIsSpecificWFComponent( child, 'CTableColumn' ) ) {
					string attribute = GUIKit.XMLTools.nodeHasAttribute( child, 'ID' );
					if( attribute ) {
						.contents[] = attribute;
						return;
					}
				}
				child.removeSelf();
			};
		}
		
		function styleSheetCursor() {
			return 'default';
		}
			
		function renderContainerStart
			return "";
		
		function renderContainerEnd {
			if( .visible() and .contents.size() > 0 ) {
				array values = .generateTemplateAttributes( 'wfTable' );
				object component = GUIKit.componentByName( 'Table' );
				string path = component.pathForComponentResource( 'Table.template' );
				if( not .source ) {
					._createDataSource();
				}
				if( .source ) {
					array columnMap = [];
					
					values['ColumnHeaders'] = (.showHeader() ? .source.columnHeaders() : []);
					values['Rows'] = .source.rows();
					.contents.each() using ( id ) {
						object column = Cache.components[id];
						if( column.sorted().toLower() == 'desc' or column.sorted().toLower() == 'asc' ) {
							values['InitialSort'] = column.id;
							values['InitialSortDirection'] = column.sorted().toLower();
						}
						if( column.secondarySort() ) {
							values['SecondarySort'] = column.id;
						}
						if( column.map() ) {
							columnMap[column.id] = column.map();
						}
					};
					values['Map'] = JSON.valueToJSON(columnMap);
					if( .totals ) {
						values['HaveTotals'] = ['Totals' => .totals];
					}
				}
				values['DefaultStyle'] = JSON.valueToJSON([ 'fg' => .defaultForegroundColour(), 'bg' => .defaultBackgroundColour() ]);
				if( .autoSort() ) {
					values['AutoSort'] = true;
				}
				if( .hasEventHook(GUIKit.EvRowClicked) ) {
					values['WantRowClick'] = true;
				}
				return GUIKit.ViewTemplate.renderPath( path, values );
			}
			return "";
		}
	}
}

